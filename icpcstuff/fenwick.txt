struct fenwick { //1-indexed
	typedef long long T; // change for int, ll
	int n;
	vector<T> v;
	fenwick(int x) : n(x) {
		v.resize(n+1);
	}
	void update(int i, T inc) {
		for (;i <= n; i += (i & -i)) v[i]+=inc;
	}
	T get(int i) {
		T tot = 0;
		for (;i >= 1; i -= (i & -i)) tot+=v[i];
		return tot;
	}
	int lower_bound(T x) { //first index such that prefix sum >= x, untested
		int i = 0; T tot = 0;
		for (int q = 31-__builtin_clz(n); q >= 0; q--) {
			if (i+(1<<q) <= n && tot+v[i+(1<<q)] < x) {
				i+=(1<<q);
				tot+=v[i];
			}
		}
		return i+1;
	}
};
