struct change {
	int *ptr;
	int val, t;
	change(int *p, int v, int tin) : ptr(p), val(v), t(tin) {}
	void undo() {*ptr = val;}
};
struct dsu {
	vector<int> v, len;
	stack<change> st;
	int ttime;
	dsu(int n) : v(n), len(n,1), ttime(0) {
		iota(v.begin(), v.end(), 0);
	}
	void make_change(int *p, int val) {
		change ch(p, *p, ttime);
		st.push(ch);
		*p = val;
	}
	void batch_undo() {
		assert(!st.empty());
		int tt = st.top().t;
		while (sz(st) && st.top().t == tt) {
			st.top().undo();
			st.pop();
		}
	}
	int root(int a) {
		return (v[a] == a ? a : root(v[a]));
	}
	bool unite(int a, int b) {
		ttime++;
		int a1 = root(a), b1 = root(b);
		if (a1 == b1) {
			make_change(&v[0], v[0]);
			return false;
		}
		if (len[a1] < len[b1]) swap(a1,b1);
		make_change(&len[a1], len[a1]+len[b1]);
		make_change(&v[b1]), a1);
		return true;
	}
};
