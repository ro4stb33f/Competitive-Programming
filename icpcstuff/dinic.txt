//edges (u,v) such that level[u] != -1 and level[v] = -1 are part of min cut
struct dinic {
	using T = int; //change for int, ll
	int n, src, sink;
	struct Edge {
		int to, rev; T flo, cap;
	};
	vector<vector<Edge>> adj;
	vector<int> level;
	vector<vector<Edge>::iterator> cur;
	dinic(int a): n(a) {
		adj.resize(n);
		level.resize(n);
		cur.resize(n);
	}
	void addedge(int u, int v, T cap) { //directed edge u->v
		Edge a{v, (int)(adj[v].size()), 0, cap};
		Edge b{u, (int)(adj[u].size()), 0, 0};
		adj[u].push_back(a);
		adj[v].push_back(b);
	}
	bool bfs() {
		for (int q = 0; q < n; q++) {
			level[q] = -1;
			cur[q] = adj[q].begin();
		}
		level[src] = 0;
		queue<int> qu;
		qu.push(src);
		while (!qu.empty()) {
			int f = qu.front();
			qu.pop();
			for (auto e : adj[f]) {
				if (level[e.to] < 0 && e.flo < e.cap) {
					level[e.to] = level[f]+1;
					qu.push(e.to);
				}
			}
		}
		return level[sink] >= 0;
	}
	T dfs(int v, T flo) {
		if (v == sink) return flo;
		for (; cur[v] != adj[v].end(); cur[v]++) {
			Edge &e = *cur[v];
			if (level[e.to] == level[v] + 1 && e.flo < e.cap) {
				T res = dfs(e.to, min(flo, e.cap-e.flo));
				if (res > 0) {
					e.flo += res;
					adj[e.to][e.rev].flo -= res;
					return res;
				}
			}
		}
		return 0;
	}
	T maxflow(int x, int y) { //source, sink
		src = x; sink = y;
		T tot = 0;
		while (bfs()) {
			while (T temp = dfs(src, numeric_limits<T>::max())) {
				tot += temp;
			}
		}
		return tot;
	}
};
